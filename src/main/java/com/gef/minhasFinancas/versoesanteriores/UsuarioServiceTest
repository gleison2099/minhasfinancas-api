package com.gef.minhasFinancas.service;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import com.gef.minhasFinancas.exception.RegraNegocioException;
import com.gef.minhasFinancas.model.entity.Usuario;
import com.gef.minhasFinancas.model.repository.UsuarioRepository;

//Sobe o contexto de toda a aplicação mas estamos testando classe a classe
@SpringBootTest 
@RunWith(SpringRunner.class)
@ActiveProfiles("test")
public class UsuarioServiceTest {
	
	@Autowired
	UsuarioService service;
	
	@Autowired
	UsuarioRepository repository;
	
	@Test(expected = Test.None.class)
	// Teste do método validarEmail.
	// Cenário 01 - Não deve lançar excessão se o email não exitir
	public void deveValidarEmail() {
		
		// Cenário
		// Este método já foi testado na classe UsuarioRepositoryTest
		// Não há necessidade de invocá-lo de novo
		repository.deleteAll();
		
		// Acão
		service.validarEmail("email@email.com");
		
		// Verificação
		// Já está sendo feita na anotação
		
	}
	
	@Test(expected = RegraNegocioException.class)
	// Teste do método validarEmail.
	// Cenário 02 - Deve lançar a excessão RegraNegocioException se o email já estiver cadastrado.
	public void deveLancarErroAoValidarEmailQuandoExistirEmailCadastrado() {
		
		// Cenário
		Usuario usuario = Usuario.builder().nome("nome").email("email@email.com").build();
		
		// Este método já foi testado na classe UsuarioRepositoryTest
        // Não há necessidade de invocá-lo de novo
		repository.save(usuario);
		
		// Acão
		service.validarEmail("email@email.com");
	}
	
}
